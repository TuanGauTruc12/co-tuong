@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}


<div></div>

<script>
    console.log(2929);
        /*
    var matrix = [];
    var roomName = "";
    var connection = new signalR.HubConnectionBuilder().withUrl("/chessHub").build();
    var avatar = document.querySelector(".avatar");

    var app = new Vue({
        el: '#app',
        data: {
            chessNode: [],
            top: 0,
            left: 0,
            currentPlayer: "den",
            playerCount: 0,
        },
        methods: {
            // Phương thức kiểm tra xem quân cờ có phù hợp cho lượt hiện tại
            isPlayerPiece(id) {
                if (this.currentPlayer === "den" && id.indexOf('den') !== -1) {
                    return true;
                }
                if (this.currentPlayer === "do" && id.indexOf('do') !== -1) {
                    return true;
                }
                return false;
            },
            switchPlayer() {
                this.currentPlayer = (this.currentPlayer === "den") ? "do" : "den";
            },
            startGame() {
                if (this.playerCount < 2) {
                    this.playerCount++;
                    if (this.playerCount === 2) {
                        this.currentPlayer = "do";
                    }
                }
            },
            handlePlayerTurn(event) {
                if (this.playerCount < 2) {
                    // Nếu chưa có đủ 2 người chơi, không cho thực hiện nước đi
                    return;
                }
                var id = event.currentTarget.id;
                if (this.isPlayerPiece(id)) {
                    this.dragStart(event);
                    this.dragEnd(event);
                    this.currentPlayer = (this.currentPlayer === "den") ? "do" : "den"; // Chuyển lượt
                }
            },
            getChessNode() {
                axios({
                    url: '/api/chess/loadChessBoard',
                    method: 'GET',
                    responseType: 'Json',

                }).then((response) => {
                    this.chessNode = response.data.chessNode;
                    matrix = response.data.maxtrix;

                });
            },
            dragStart(event) {

                this.top = event.clientY;
                this.left = event.clientX;
            },
            getIndexByTopLef(top, left, matrix) {
                var obj = {};
                for (var i = 0; i < matrix.length; i++) {
                    for (var j = 0; j < matrix[i].length; j++) {
                        if (Math.abs(matrix[i][j].top - top) < 20 && Math.abs(matrix[i][j].left - left) < 20) {
                            obj.i = i;
                            obj.j = j;
                            obj.id = matrix[i][j].id;
                            return obj;
                        }
                    }
                }
                return null;
            },
            dragEnd(event) {
                var id = event.currentTarget.id;

                if (this.currentPlayer === "den" && id.indexOf('den') === -1) {
                    return;
                }
                if (this.currentPlayer === "do" && id.indexOf('do') === -1) {
                    return;
                }

                var id = event.currentTarget.id;
                var moveX = event.clientX - this.left;
                var moveY = event.clientY - this.top;
                moveX = moveX + event.currentTarget.offsetLeft;
                moveY = moveY + event.currentTarget.offsetTop;

                var nodeStart = this.getIndexByTopLef(event.currentTarget.offsetTop, event.currentTarget.offsetLeft, matrix);
                var nodeEnd = this.getIndexByTopLef(moveY, moveX, matrix);
                if (nodeEnd == null) {
                    return;
                }
                var objRemove = null;
                //Ma do
                if (id.indexOf('ma') >= 0) {
                    var gapI = Math.abs(nodeEnd.i - nodeStart.i);
                    var gapJ = Math.abs(nodeEnd.j - nodeStart.j);
                    if (!((gapI == 1 && gapJ == 2) || (gapJ == 1 && gapI == 2))) {
                        return;
                    }
                    if ((gapI == 1 && gapJ == 2) && (nodeEnd.j > nodeStart.j)) {
                        if (matrix[nodeStart.i][nodeStart.j + 1].id != "") {
                            return;
                        }
                    }
                    if ((gapI == 1 && gapJ == 2) && (nodeEnd.j < nodeStart.j)) {
                        if (matrix[nodeStart.i][nodeStart.j - 1].id != "") {
                            return;
                        }
                    }

                    if ((gapI == 2 && gapJ == 1) && (nodeEnd.i > nodeStart.i)) {
                        if (matrix[nodeStart.i + 1][nodeStart.j].id != "") {
                            return;
                        }
                    }
                    if ((gapI == 2 && gapJ == 1) && (nodeEnd.i < nodeStart.i)) {
                        if (matrix[nodeStart.i - 1][nodeStart.j].id != "") {
                            return;
                        }
                    }

                    if (id.indexOf('do') > 0) {
                        if (nodeEnd.id != "" && nodeEnd.id.indexOf('do') > 0) {
                            return;
                        }
                        else {
                            if (nodeEnd.id != "")//quan den
                            {
                                objRemove = { id: nodeEnd.id };
                            }
                        }
                    }
                    if (id.indexOf('den') > 0) {
                        if (nodeEnd.id != "" && nodeEnd.id.indexOf('den') > 0) {
                            return;
                        }
                        else {
                            if (nodeEnd.id != "")//quan den
                            {
                                objRemove = { id: nodeEnd.id };
                            }
                        }
                    }
                }


                // Xe
                if (id.indexOf("xe") >= 0) {
                    var gapI = Math.abs(nodeEnd.i - nodeStart.i);
                    var gapJ = Math.abs(nodeEnd.j - nodeStart.j);

                    // Kiểm tra xem con xe di chuyển theo hàng hoặc cột
                    if (gapI > 0 && gapJ > 0) {
                        return;
                    }

                    // Kiểm tra xem con xe không nhảy qua các quân cờ
                    if (gapI > 0) {
                        for (let i = Math.min(nodeStart.i, nodeEnd.i) + 1; i < Math.max(nodeStart.i, nodeEnd.i); i++) {
                            if (matrix[i][nodeStart.j].id !== "") {
                                return;
                            }
                        }
                    } else {
                        for (let j = Math.min(nodeStart.j, nodeEnd.j) + 1; j < Math.max(nodeStart.j, nodeEnd.j); j++) {
                            if (matrix[nodeStart.i][j].id !== "") {
                                return;
                            }
                        }
                    }

                    // Kiểm tra xem nếu ô đích đã có quân cờ, nó phải thuộc phe đối phương
                    if (matrix[nodeEnd.i][nodeEnd.j].id !== "") {
                        if (id.indexOf('do') >= 0 && matrix[nodeEnd.i][nodeEnd.j].id.indexOf('do') >= 0) {
                            return;
                        }
                        if (id.indexOf('den') >= 0 && matrix[nodeEnd.i][nodeEnd.j].id.indexOf('den') >= 0) {
                            return;
                        }
                    }


                    if (id.indexOf('do') > 0) {
                        if (nodeEnd.id != "" && nodeEnd.id.indexOf('do') > 0) {
                            return;
                        }
                        else {
                            if (nodeEnd.id != "")//quan den
                            {
                                objRemove = { id: nodeEnd.id };
                            }
                        }
                    }
                    if (id.indexOf('den') > 0) {
                        if (nodeEnd.id != "" && nodeEnd.id.indexOf('den') > 0) {
                            return;
                        }
                        else {
                            if (nodeEnd.id != "")//quan den
                            {
                                objRemove = { id: nodeEnd.id };
                            }
                        }
                    }

                }


                //tuong
                if (id.indexOf('Tuong') >= 0) {
                    var gapI = Math.abs(nodeEnd.i - nodeStart.i);
                    var gapJ = Math.abs(nodeEnd.j - nodeStart.j);

                    if (id.indexOf('do') > 0) {
                        if (!((gapI == 2 && gapJ == 2) && (nodeEnd.i < 5))) {
                            return;
                        }
                        if (nodeEnd.id != "" && nodeEnd.id.indexOf('do') > 0) {
                            return;
                        }
                        else {
                            if (nodeEnd.id != "")//quan den
                            {
                                objRemove = { id: nodeEnd.id };
                            }
                        }
                    }
                    if (id.indexOf('den') > 0) {
                        if (!((gapI == 2 && gapJ == 2) && (nodeEnd.i >= 5))) {
                            return;
                        }
                        if (nodeEnd.id != "" && nodeEnd.id.indexOf('den') > 0) {
                            return;
                        }
                        else {
                            if (nodeEnd.id != "")//quan den
                            {
                                objRemove = { id: nodeEnd.id };
                            }
                        }
                    }

                    if ((nodeEnd.j > nodeStart.j) && (nodeEnd.i > nodeStart.i)) {
                        if (matrix[nodeStart.i + 1][nodeStart.j + 1].id != "") {
                            return;
                        }
                    }
                    if ((nodeEnd.j > nodeStart.j) && (nodeEnd.i < nodeStart.i)) {
                        if (matrix[nodeStart.i - 1][nodeStart.j + 1].id != "") {
                            return;
                        }
                    }
                    if ((nodeEnd.j < nodeStart.j) && (nodeEnd.i < nodeStart.i)) {
                        if (matrix[nodeStart.i - 1][nodeStart.j - 1].id != "") {
                            return;
                        }
                    }
                    if ((nodeEnd.j < nodeStart.j) && (nodeEnd.i > nodeStart.i)) {
                        if (matrix[nodeStart.i + 1][nodeStart.j - 1].id != "") {
                            return;
                        }
                    }
                }
                //si
                if (id.indexOf('si') >= 0) {
                    var gapI = Math.abs(nodeEnd.i - nodeStart.i);
                    var gapJ = Math.abs(nodeEnd.j - nodeStart.j);

                    if (!((gapI == 1 && gapJ == 1) && nodeEnd.j >= 3 && nodeEnd.j <= 5)) {
                        return;
                    }

                    if (id.indexOf('den') > 0) {
                        if (!(nodeEnd.i >= 7))
                            return;
                        if (nodeEnd.id != "" && nodeEnd.id.indexOf('den') > 0) {
                            return;
                        }
                        else {
                            if (nodeEnd.id != "")//quan den
                            {
                                objRemove = { id: nodeEnd.id };
                            }

                        }
                    }
                    if (id.indexOf('do') > 0) {
                        if (!(nodeEnd.i <= 2))
                            return;
                        if (nodeEnd.id != "" && nodeEnd.id.indexOf('do') > 0) {
                            return;
                        }
                        else {
                            if (nodeEnd.id != "")//quan den
                            {
                                objRemove = { id: nodeEnd.id };
                            }

                        }
                    }
                }
                //Chu tuong
                if (id.indexOf('chutuong') >= 0) {
                    var gapI = Math.abs(nodeEnd.i - nodeStart.i);
                    var gapJ = Math.abs(nodeEnd.j - nodeStart.j);

                    if (!(nodeEnd.j >= 3 && nodeEnd.j <= 5)) {
                        return;
                    }

                    if (id.indexOf('den') > 0) {
                        if (!(nodeEnd.i >= 7))
                            return;
                        if (nodeEnd.id != "" && nodeEnd.id.indexOf('den') > 0) {
                            return;
                        }
                        else {
                            if (nodeEnd.id != "")//quan den
                            {
                                objRemove = { id: nodeEnd.id };
                            }

                        }
                    }
                    if (id.indexOf('do') > 0) {
                        if (!(nodeEnd.i <= 2))
                            return;
                        if (nodeEnd.id != "" && nodeEnd.id.indexOf('do') > 0) {
                            return;
                        }
                        else {
                            if (nodeEnd.id != "")//quan den
                            {
                                objRemove = { id: nodeEnd.id };
                            }

                        }
                    }
                }
                //tot
                if (id.indexOf('tot') >= 0) {
                    var gapI = Math.abs(nodeEnd.i - nodeStart.i);
                    var gapJ = Math.abs(nodeEnd.j - nodeStart.j);
                    if (((gapI = gapI++) && (gapJ = gapJ++))) {//cấm chéo
                        return;
                    }
                    if ((gapI++ >= 2))//cấm đi dọc 2 ô
                        return;

                    if (id.indexOf('do') > 0) {
                        if (nodeStart.i > nodeEnd.i)//cấm đi lùi
                            return;
                        if (nodeEnd.i < 5) {
                            if (gapJ = gapJ++)//cấm ngang
                                return;
                        }
                        else {
                            if (gapJ++ >= 2) //cấm đi ngang 2 ô
                                return;
                        }

                        if (nodeEnd.id != "" && nodeEnd.id.indexOf('do') > 0) {
                            return;
                        }
                        else {
                            if (nodeEnd.id != "")//quan den
                            {
                                objRemove = { id: nodeEnd.id };
                            }
                        }
                    }

                    if (id.indexOf('den') > 0) {
                        if (nodeStart.i < nodeEnd.i)//cấm đi lùi
                            return;
                        if (nodeEnd.i >= 5) {
                            if (gapJ = gapJ++)
                                return;
                        }
                        else {
                            if (gapJ++ >= 2) //cấm đi ngang 2 ô
                                return;
                        }

                        if (nodeEnd.id != "" && nodeEnd.id.indexOf('den') > 0) {
                            return;
                        }
                        else {
                            if (nodeEnd.id != "")//quan do
                            {
                                objRemove = { id: nodeEnd.id };
                            }
                        }
                    }
                }

                function sendChessMove(id, fromi, fromj, toi, toj) {
                    connection.invoke("MoveChess", roomName, id, fromi, fromj, toi, toj).catch(function (err) {
                        console.error(err.toString());
                    });
                }


                var para = [{ id: id, fromi: nodeStart.i, fromj: nodeStart.j, toi: nodeEnd.i, toj: nodeEnd.j }];
                if (objRemove != null) {
                    para.push(objRemove);
                }
                axios({
                    url: '/api/chess/move-check-node',
                    method: 'Post',
                    responseType: 'Json',
                    data: para
                }).then((response) => {
                    this.currentPlayer = this.currentPlayer === "den" ? "do" : "den";
                });

                sendChessMove(id, nodeStart.i, nodeStart.j, nodeEnd.i, nodeEnd.j);
                this.currentPlayer = this.currentPlayer === "den" ? "do" : "den";
            }
        },
        mounted: function () {
            this.getChessNode();
            //ReceiveChessMove
            var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();
            connection.on("ReceiveChessMove", function (message) {
                console.log(message);
                var response = JSON.parse(message);
                matrix[response[0].fromi][response[0].fromj].id = "";
                var nodeEnd = matrix[response[0].toi][response[0].toj];
                nodeEnd.id = response[0].id;


                var obj = document.getElementById(response[0].id);
                obj.style.top = nodeEnd.top + 'px';
                obj.style.left = nodeEnd.left + 'px';

                if (response.length > 1) {
                    var temp = document.getElementById(response[1].id);
                    temp.style.display = "none";
                }

                this.currentPlayer = this.currentPlayer === "den" ? "do" : "den";
            });
            connection.start().then(function () {
            }).catch(function (err) {
                return console.error(err.toString());
            });

        }
    });


    //const imageElement = document.createElement("img");
    //const imgUrl = currentPlayer === "den" ? "https://picsum.photos/200" : "https://picsum.photos/200";
    //imageElement.src = imgUrl;
    //avatar.appendChild(imageElement);

    connection.start().then(function () {
        roomName = prompt("Enter room name:");
        connection.invoke("JoinGameRoom", roomName).catch(function (err) {
            console.error(err.toString());
        });
    }).catch(function (err) {
        return console.error(err.toString());
    });

    connection.on("ReceiveChessMove", function (message) {
        var response = JSON.parse(message);
        matrix[response[0].fromi][response[0].fromj].id = "";
        var nodeEnd = matrix[response[0].toi][response[0].toj];
        nodeEnd.id = response[0].id;

        var obj = document.getElementById(response[0].id);
        obj.style.top = nodeEnd.top + 'px';
        obj.style.left = nodeEnd.left + 'px';

        if (response.length > 1) {
            var temp = document.getElementById(response[1].id);
            temp.style.display = "none";
        }
    });
    */

</script>